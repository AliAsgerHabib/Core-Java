Class and Objects : 
=====================
1. All class objects are dynamically allocated (Run time).

2. An object does not go out-of-scope if the method in which it was created terminates. The object will continue to exist as long as there is a reference to it somewhere in your program.

3. Box b1 = new Box();
   Box b2 = b1;
  Here line 2, does not create a new object b2 which is a copy of b1. 
  But rather, the reference variable b2 starts pointing to the same object that b1 is pointing to.

4. The implicit return type of a classâ€™ constructor is the class type itself.

5. A class is called a 'top-level' class, if it is not enclosed in the code block of another class, type or method. 

6. A top-level class can have only 2 access modifiers:
   1. public : Any class in any package can access this.
   2. No modifier : Class is accessible only to classes in the same package.

7. Instance variables can be initialised in the class definition.
Eg. Car.java

Access Modifier for class members :
=====================================
1. public      : Any class in any package can access.
2. protected   : Any class in the same package and any subclass outside the package.
4. No modifier : Any class in the same package but no classes outside the package.
3. private     : Cannot be accessed outside the class.


Garbage Collection : 
=====================
1. To deallocate memory, Java uses garabage collection.
2. When no references to an object exist, that object is assumed to be no longer needed, and the memory occupied by the object can be reclaimed.